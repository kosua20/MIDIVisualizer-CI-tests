name: CI

# Controls when the action will run. Triggers the workflow on push only for the master branch
on:
  release:
    types: 
      - published

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          #- os: ubuntu-latest
          #  cmake-opts: 
          #  artifact_name: build/MIDIVisualizer
          #  asset_name: MIDIVisualizer-ubuntu.zip
          #- os: windows-latest
          #  cmake-opts: -A x64
          #  artifact_name: build/x64/Release/MIDIVisualizer.exe
          #  asset_name: MIDIVisualizer-windows-64.zip
          - os: macOS-latest
            cmake-opts:
            artifact_name: build/MIDIVisualizer
            asset_name: MIDIVisualizer-macos.zip
       

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create dir
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Dependencies-ubuntu
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -yq xorg-dev libgtk-3-dev yasm
          cd $GITHUB_WORKSPACE/libs
          wget -O ffmpeg.zip http://github.com/kosua20/MIDIVisualizer-CI-tests/releases/download/dependencies/ffmpeg-osx-64-static-lgpl.zip
          unzip ffmpeg.zip
          rm ffmpeg.zip
          cp ffmpeg/FindFFMPEG.cmake ./

      - name: Dependencies-macos
        if: matrix.os == 'macOS-latest'
        shell: bash
        run: |
          brew install wget
          cd $GITHUB_WORKSPACE/libs
          wget -O ffmpeg.zip http://github.com/kosua20/MIDIVisualizer-CI-tests/releases/download/dependencies/ffmpeg-osx-64-static-lgpl.zip
          unzip ffmpeg.zip
          rm ffmpeg.zip
          cp ffmpeg/FindFFMPEG.cmake ./

      - name: Dependencies-windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          choco install wget unzip
          cd $GITHUB_WORKSPACE/libs
          wget -O ffmpeg.zip http://github.com/kosua20/MIDIVisualizer-CI-tests/releases/download/dependencies/ffmpeg-osx-64-static-lgpl.zip
          unzip ffmpeg.zip
          rm ffmpeg.zip
          cp ffmpeg/FindFFMPEG.cmake ./

      - name: Configure
        shell: bash
        working-directory: ${{runner.workspace}}
        run: cmake -S $GITHUB_WORKSPACE -B build/ -DCMAKE_BUILD_TYPE=Release ${{matrix.cmake-opts}}

      - name: Build
        working-directory: ${{runner.workspace}}
        shell: bash
        run: cmake --build build/ --config Release

      - name: Upload
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{runner.workspace}}/${{matrix.artifact_name}}
          asset_name: ${{matrix.asset_name}}
          asset_content_type: application/zip




